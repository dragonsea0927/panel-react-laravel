<?php

namespace Convoy\Repositories\Proxmox\Server;

use Convoy\Exceptions\Repository\Proxmox\ProxmoxConnectionException;
use Convoy\Models\Server;
use Convoy\Repositories\Proxmox\ProxmoxRepository;
use GuzzleHttp\Exception\GuzzleException;
use Webmozart\Assert\Assert;

class ProxmoxAllocationRepository extends ProxmoxRepository
{
    public $diskTypes = [
        'scsi',
        'sata',
        'virtio',
        'ide',
    ];

    public $diskFormats = [
        'raw',
        'qcow2',
        'vmdk',
    ];

    public $validDisks = ['ide0', 'ide1', 'ide2', 'ide3', 'scsi0', 'scsi1', 'scsi2', 'scsi3', 'scsi4', 'scsi5', 'scsi6', 'scsi7', 'scsi8', 'scsi9', 'scsi10', 'scsi11', 'scsi12', 'scsi13', 'scsi14', 'scsi15', 'scsi16', 'scsi17', 'scsi18', 'scsi19', 'scsi20', 'scsi21', 'scsi22', 'scsi23', 'scsi24', 'scsi25', 'scsi26', 'scsi27', 'scsi28', 'scsi29', 'scsi30', 'virtio0', 'virtio1', 'virtio2', 'virtio3', 'virtio4', 'virtio5', 'virtio6', 'virtio7', 'virtio8', 'virtio9', 'virtio10', 'virtio11', 'virtio12', 'virtio13', 'virtio14', 'virtio15', 'sata0', 'sata1', 'sata2', 'sata3', 'sata4', 'sata5', 'efidisk0', 'tpmstate0'];

    public function getAllocations()
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->get(sprintf('/api2/json/nodes/%s/qemu/%s/pending', $this->node->cluster, $this->server->vmid));
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException();
        }

        return $this->getData($response);
    }

    public function update(array $params = [], bool $put = false)
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->request($put ? 'put' : 'post', sprintf('/api2/json/nodes/%s/qemu/%s/config', $this->node->cluster, $this->server->vmid), [
                'json' => $params,
            ]);
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException($e);
        }

        return $this->getData($response);
    }

    public function resizeDisk(int $bytes, string $disk)
    {
        Assert::isInstanceOf($this->server, Server::class);
        Assert::inArray($disk, $this->validDisks, 'Invalid disk type');

        $gigabytes = $bytes / 1073741824;

        try {
            $response = $this->getHttpClient()->put(
                sprintf('/api2/json/nodes/%s/qemu/%s/resize', $this->node->cluster, $this->server->vmid),
                [
                    'json' => [
                        'disk' => $disk,
                        'size' => "+{$gigabytes}G"
                    ]
                ]
            );
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException($e);
        }

        return $this->getData($response);
    }

    public function getResources()
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->get('/api2/json/cluster/resources');
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException($e);
        }

        $data = $this->getData($response);

        return collect($data)->where('vmid', $this->server->vmid)->firstOrFail();
    }

    public function getIpsets()
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->get(sprintf('/api2/json/nodes/%s/qemu/%s/firewall/ipset', $this->node->cluster, $this->server->vmid));
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException();
        }

        return $this->getData($response);
    }

    public function createIpset(string $name, string $comments = 'Generated by Convoy')
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->post(sprintf('/api2/json/nodes/%s/qemu/%s/firewall/ipset', $this->node->cluster, $this->server->vmid), [
                'json' => [
                    'name' => $name,
                    'comment' => $comments,
                ]
            ]);
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException($e);
        }

        return $this->getData($response);
    }

    public function deleteIpset(string $name)
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->delete(sprintf('/api2/json/nodes/%s/qemu/%s/firewall/ipset/%s', $this->node->cluster, $this->server->vmid, $name));
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException();
        }

        return $this->getData($response);
    }

    public function getLockedIps(string $ipsetName)
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->get(sprintf('/api2/json/nodes/%s/qemu/%s/firewall/ipset/%s', $this->node->cluster, $this->server->vmid, $ipsetName));
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException();
        }

        return $this->getData($response);
    }

    public function lockIp(string $ipsetName, string $address, string $comments = 'Generated by Convoy', bool $noMatch = false)
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->post(sprintf('/api2/json/nodes/%s/qemu/%s/firewall/ipset/%s', $this->node->cluster, $this->server->vmid, $ipsetName), [
                'json' => [
                    'cidr' => $address,
                    'nomatch' => $noMatch,
                    'comment' => $comments,
                ]
            ]);
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException($e);
        }

        return $this->getData($response);
    }

    public function unlockIp(string $ipsetName, string $address)
    {
        Assert::isInstanceOf($this->server, Server::class);

        try {
            $response = $this->getHttpClient()->delete(sprintf('/api2/json/nodes/%s/qemu/%s/firewall/ipset/%s/%s', $this->node->cluster, $this->server->vmid, $ipsetName, $address));
        } catch (GuzzleException $e) {
            throw new ProxmoxConnectionException();
        }

        return $this->getData($response);
    }
}
