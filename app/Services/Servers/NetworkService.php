<?php

namespace App\Services\Servers;

use App\Models\Server;
use App\Repositories\Proxmox\Server\ProxmoxAllocationRepository;
use App\Services\ProxmoxService;
use Webmozart\Assert\Assert;

class NetworkService extends ProxmoxService
{
    private ProxmoxAllocationRepository $allocationRepository;

    public function __construct()
    {
        $this->allocationRepository = new ProxmoxAllocationRepository;
    }

    public function getIpsets()
    {
        return $this->allocationRepository->setServer($this->server)->getIpsets();
    }

    public function getLockedIps(string $ipsetName)
    {
        return $this->allocationRepository->setServer($this->server)->getLockedIps($ipsetName);
    }

    public function createIpset(string $name, string $comments = 'Generated by Convoy')
    {
        return $this->allocationRepository->setServer($this->server)->createIpset($name, $comments);
    }

    public function deleteIpset(string $name)
    {
        Assert::isInstanceOf($this->server, Server::class);

        $addresses = array_column($this->getLockedIps($name), 'cidr');

        foreach ($addresses as $address)
        {
            $this->unlockIp($name, $address);
        }

        return $this->allocationRepository->setServer($this->server)->deleteIpset($name);
    }

    public function clearIpsets()
    {
        $ipSets = array_column($this->getIpsets(), 'name');

        foreach ($ipSets as $ipSet)
        {
            $this->deleteIpset($ipSet);
        }
    }

    public function lockIp(string $ipsetName, string $address, string $comments = 'Generated by Convoy', bool $noMatch = false)
    {
        return $this->allocationRepository->setServer($this->server)->lockIp($ipsetName, $address, $comments, $noMatch);
    }

    public function lockIps(array $addresses, string $ipsetName = 'default')
    {
        $this->createIpset($ipsetName);

        foreach ($addresses as $address)
        {
            $this->lockIp($ipsetName, $address);
        }
    }

    public function unlockIp(string $ipsetName, string $address)
    {
        return $this->allocationRepository->setServer($this->server)->unlockIp($ipsetName, $address);
    }
}